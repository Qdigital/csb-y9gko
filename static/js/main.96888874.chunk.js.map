{"version":3,"sources":["middleware/api.js","components/Explore.js","containers/App.js","components/User.js","components/Repo.js","components/List.js","containers/UserPage.js","containers/RepoPage.js","containers/Root.prod.js","reducers/paginate.js","reducers/index.js","store/configureStore.prod.js","actions/index.js","containers/Root.js","store/configureStore.js","index.js"],"names":["API_ROOT","userSchema","schema","Entity","idAttribute","user","login","toLowerCase","repoSchema","owner","repo","fullName","Schemas","USER","USER_ARRAY","REPO","REPO_ARRAY","CALL_API","store","next","action","callAPI","endpoint","types","getState","Error","Array","isArray","length","every","type","actionWith","data","finalAction","Object","assign","requestType","successType","failureType","fullUrl","indexOf","fetch","then","response","json","ok","Promise","reject","camelizedJson","camelizeKeys","nextPageUrl","link","headers","get","nextLink","split","find","s","trim","slice","getNextPageUrl","normalize","callApi","error","message","Explore","getInputValue","input","value","setInputValue","val","handleKeyUp","e","keyCode","handleGoClick","props","onChange","prevProps","this","size","ref","defaultValue","onKeyUp","onClick","href","target","rel","Component","App","handleDismissClick","resetErrorMessage","preventDefault","handleChange","nextValue","history","push","errorMessage","style","backgroundColor","padding","children","inputValue","renderErrorMessage","withRouter","connect","state","ownProps","location","pathname","substring","User","avatarUrl","name","className","to","src","alt","width","height","Repo","description","List","isFetching","onLoadMoreClick","fontSize","disabled","pageCount","items","renderItem","loadingLabel","isEmpty","isLastPage","map","renderLoadMore","defaultProps","loadData","loadUser","loadStarred","UserPage","handleLoadMoreClick","starredRepos","starredRepoOwners","starredPagination","renderRepo","zip","match","params","starredByUser","pagination","entities","users","repos","ids","id","loadRepo","loadStargazers","RepoPage","stargazers","stargazersPagination","renderUser","stargazersByRepo","Root","path","component","paginate","mapActionToKey","t","updatePagination","undefined","union","result","key","combineReducers","ActionTypes","rootReducer","merge","configureStore","preloadedState","createStore","applyMiddleware","thunk","api","fetchUser","requiredFields","dispatch","hasOwnProperty","fetchRepo","STARRED_REQUEST","STARRED_SUCCESS","STARRED_FAILURE","nextPage","fetchStarred","STARGAZERS_REQUEST","STARGAZERS_SUCCESS","STARGAZERS_FAILURE","fetchStargazers","RESET_ERROR_MESSAGE","module","exports","require","render","document","getElementById"],"mappings":"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","file":"static/js/main.96888874.chunk.js","sourcesContent":["import { normalize, schema } from 'normalizr'\nimport { camelizeKeys } from 'humps'\n\n// Extracts the next page URL from Github API response.\nconst getNextPageUrl = response => {\n  const link = response.headers.get('link')\n  if (!link) {\n    return null\n  }\n\n  const nextLink = link.split(',').find(s => s.indexOf('rel=\"next\"') > -1)\n  if (!nextLink) {\n    return null\n  }\n\n  return nextLink.trim().split(';')[0].slice(1, -1)\n}\n\nconst API_ROOT = 'https://api.github.com/'\n\n// Fetches an API response and normalizes the result JSON according to schema.\n// This makes every API response have the same shape, regardless of how nested it was.\nconst callApi = (endpoint, schema) => {\n  const fullUrl = (endpoint.indexOf(API_ROOT) === -1) ? API_ROOT + endpoint : endpoint\n\n  return fetch(fullUrl)\n    .then(response =>\n      response.json().then(json => {\n        if (!response.ok) {\n          return Promise.reject(json)\n        }\n\n        const camelizedJson = camelizeKeys(json)\n        const nextPageUrl = getNextPageUrl(response)\n\n        return Object.assign({},\n          normalize(camelizedJson, schema),\n          { nextPageUrl }\n        )\n      })\n    )\n}\n\n// We use this Normalizr schemas to transform API responses from a nested form\n// to a flat form where repos and users are placed in `entities`, and nested\n// JSON objects are replaced with their IDs. This is very convenient for\n// consumption by reducers, because we can easily build a normalized tree\n// and keep it updated as we fetch more data.\n\n// Read more about Normalizr: https://github.com/paularmstrong/normalizr\n\n// GitHub's API may return results with uppercase letters while the query\n// doesn't contain any. For example, \"someuser\" could result in \"SomeUser\"\n// leading to a frozen UI as it wouldn't find \"someuser\" in the entities.\n// That's why we're forcing lower cases down there.\n\nconst userSchema = new schema.Entity('users', {}, {\n  idAttribute: user => user.login.toLowerCase()\n})\n\nconst repoSchema = new schema.Entity('repos', {\n  owner: userSchema\n}, {\n  idAttribute: repo => repo.fullName.toLowerCase()\n})\n\n// Schemas for Github API responses.\nexport const Schemas = {\n  USER: userSchema,\n  USER_ARRAY: [userSchema],\n  REPO: repoSchema,\n  REPO_ARRAY: [repoSchema]\n}\n\n// Action key that carries API call info interpreted by this Redux middleware.\nexport const CALL_API = 'Call API'\n\n// A Redux middleware that interprets actions with CALL_API info specified.\n// Performs the call and promises when such actions are dispatched.\nexport default store => next => action => {\n  const callAPI = action[CALL_API]\n  if (typeof callAPI === 'undefined') {\n    return next(action)\n  }\n\n  let { endpoint } = callAPI\n  const { schema, types } = callAPI\n\n  if (typeof endpoint === 'function') {\n    endpoint = endpoint(store.getState())\n  }\n\n  if (typeof endpoint !== 'string') {\n    throw new Error('Specify a string endpoint URL.')\n  }\n  if (!schema) {\n    throw new Error('Specify one of the exported Schemas.')\n  }\n  if (!Array.isArray(types) || types.length !== 3) {\n    throw new Error('Expected an array of three action types.')\n  }\n  if (!types.every(type => typeof type === 'string')) {\n    throw new Error('Expected action types to be strings.')\n  }\n\n  const actionWith = data => {\n    const finalAction = Object.assign({}, action, data)\n    delete finalAction[CALL_API]\n    return finalAction\n  }\n\n  const [ requestType, successType, failureType ] = types\n  next(actionWith({ type: requestType }))\n\n  return callApi(endpoint, schema).then(\n    response => next(actionWith({\n      response,\n      type: successType\n    })),\n    error => next(actionWith({\n      type: failureType,\n      error: error.message || 'Something bad happened'\n    }))\n  )\n}\n","/* eslint-disable no-undef */\n\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nconst GITHUB_REPO = 'https://github.com/reduxjs/redux'\n\nexport default class Explore extends Component {\n  static propTypes = {\n    value: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.value !== this.props.value) {\n      this.setInputValue(this.props.value)\n    }\n  }\n\n  getInputValue = () => {\n    return this.input.value\n  }\n\n  setInputValue = (val) => {\n    // Generally mutating DOM is a bad idea in React components,\n    // but doing this for a single uncontrolled field is less fuss\n    // than making it controlled and maintaining a state for it.\n    this.input.value = val\n  }\n\n  handleKeyUp = (e) => {\n    if (e.keyCode === 13) {\n      this.handleGoClick()\n    }\n  }\n\n  handleGoClick = () => {\n    this.props.onChange(this.getInputValue())\n  }\n\n  render() {\n    return (\n      <div>\n        <p>Type a username or repo full name and hit 'Go':</p>\n        <input size=\"45\"\n               ref={(input) => this.input = input}\n               defaultValue={this.props.value}\n               onKeyUp={this.handleKeyUp} />\n        <button onClick={this.handleGoClick}>\n          Go!\n        </button>\n        <p>\n          Code on <a href={GITHUB_REPO} target=\"_blank\" rel=\"noopener noreferrer\">Github</a>.\n        </p>\n        <p>\n          Move the DevTools with Ctrl+W or hide them with Ctrl+H.\n        </p>\n      </div>\n    )\n  }\n}\n","/* eslint-disable no-undef */\n\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router-dom'\nimport Explore from '../components/Explore'\nimport { resetErrorMessage } from '../actions'\n\nclass App extends Component {\n  static propTypes = {\n    // Injected by React Redux\n    errorMessage: PropTypes.string,\n    resetErrorMessage: PropTypes.func.isRequired,\n    inputValue: PropTypes.string.isRequired,\n    // Injected by React Router\n    children: PropTypes.node\n  }\n\n  handleDismissClick = e => {\n    this.props.resetErrorMessage()\n    e.preventDefault()\n  }\n\n  handleChange = nextValue => {\n    this.props.history.push(`/${nextValue}`)\n  }\n\n  renderErrorMessage() {\n    const { errorMessage } = this.props\n    if (!errorMessage) {\n      return null\n    }\n\n    return (\n      <p style={{ backgroundColor: '#e99', padding: 10 }}>\n        <b>{errorMessage}</b>\n        {' '}\n        <button onClick={this.handleDismissClick}>\n          Dismiss\n        </button>\n      </p>\n    )\n  }\n\n  render() {\n    const { children, inputValue } = this.props\n    return (\n      <div>\n        <Explore value={inputValue}\n                 onChange={this.handleChange} />\n        <hr />\n        {this.renderErrorMessage()}\n        {children}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => ({\n  errorMessage: state.errorMessage,\n  inputValue: ownProps.location.pathname.substring(1)\n})\n\nexport default withRouter(connect(mapStateToProps, {\n  resetErrorMessage\n})(App))\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\n\nconst User = ({ user }) => {\n  const { login, avatarUrl, name } = user\n\n  return (\n    <div className=\"User\">\n      <Link to={`/${login}`}>\n        <img src={avatarUrl} alt={login} width=\"72\" height=\"72\" />\n        <h3>\n          {login} {name && <span>({name})</span>}\n        </h3>\n      </Link>\n    </div>\n  )\n}\n\nUser.propTypes = {\n  user: PropTypes.shape({\n    login: PropTypes.string.isRequired,\n    avatarUrl: PropTypes.string.isRequired,\n    name: PropTypes.string\n  }).isRequired\n}\n\nexport default User\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\n\nconst Repo = ({ repo, owner }) => {\n  const { login } = owner\n  const { name, description } = repo\n\n  return (\n    <div className=\"Repo\">\n      <h3>\n        <Link to={`/${login}/${name}`}>\n          {name}\n        </Link>\n        {' by '}\n        <Link to={`/${login}`}>\n          {login}\n        </Link>\n      </h3>\n      {description &&\n        <p>{description}</p>\n      }\n    </div>\n  )\n}\n\nRepo.propTypes = {\n  repo: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    description: PropTypes.string\n  }).isRequired,\n  owner: PropTypes.shape({\n    login: PropTypes.string.isRequired\n  }).isRequired\n}\n\nexport default Repo\n","/* eslint-disable no-undef */\n\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport default class List extends Component {\n  static propTypes = {\n    loadingLabel: PropTypes.string.isRequired,\n    pageCount: PropTypes.number,\n    renderItem: PropTypes.func.isRequired,\n    items: PropTypes.array.isRequired,\n    isFetching: PropTypes.bool.isRequired,\n    onLoadMoreClick: PropTypes.func.isRequired,\n    nextPageUrl: PropTypes.string\n  }\n\n  static defaultProps = {\n    isFetching: true,\n    loadingLabel: 'Loading...'\n  }\n\n  renderLoadMore() {\n    const { isFetching, onLoadMoreClick } = this.props\n    return (\n      <button style={{ fontSize: '150%' }}\n              onClick={onLoadMoreClick}\n              disabled={isFetching}>\n        {isFetching ? 'Loading...' : 'Load More'}\n      </button>\n    )\n  }\n\n  render() {\n    const {\n      isFetching, nextPageUrl, pageCount,\n      items, renderItem, loadingLabel\n    } = this.props\n\n    const isEmpty = items.length === 0\n    if (isEmpty && isFetching) {\n      return <h2><i>{loadingLabel}</i></h2>\n    }\n\n    const isLastPage = !nextPageUrl\n    if (isEmpty && isLastPage) {\n      return <h1><i>Nothing here!</i></h1>\n    }\n\n    return (\n      <div>\n        {items.map(renderItem)}\n        {pageCount > 0 && !isLastPage && this.renderLoadMore()}\n      </div>\n    )\n  }\n}\n","/* eslint-disable no-undef */\n\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router-dom'\nimport { loadUser, loadStarred } from '../actions'\nimport User from '../components/User'\nimport Repo from '../components/Repo'\nimport List from '../components/List'\nimport zip from 'lodash/zip'\n\nconst loadData = ({ login, loadUser, loadStarred }) => {\n  loadUser(login, [ 'name' ])\n  loadStarred(login)\n}\n\nclass UserPage extends Component {\n  static propTypes = {\n    login: PropTypes.string.isRequired,\n    user: PropTypes.object,\n    starredPagination: PropTypes.object,\n    starredRepos: PropTypes.array.isRequired,\n    starredRepoOwners: PropTypes.array.isRequired,\n    loadUser: PropTypes.func.isRequired,\n    loadStarred: PropTypes.func.isRequired\n  }\n\n  componentDidMount() {\n    loadData(this.props)\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.login !== this.props.login) {\n      loadData(this.props)\n    }\n  }\n\n  handleLoadMoreClick = () => {\n    this.props.loadStarred(this.props.login, true)\n  }\n\n  renderRepo([ repo, owner ]) {\n    return (\n      <Repo\n        repo={repo}\n        owner={owner}\n        key={repo.fullName} />\n    )\n  }\n\n  render() {\n    const { user, login } = this.props\n    if (!user) {\n      return <h1><i>Loading {login}{\"'s profile...\"}</i></h1>\n    }\n\n    const { starredRepos, starredRepoOwners, starredPagination } = this.props\n    return (\n      <div>\n        <User user={user} />\n        <hr />\n        <List renderItem={this.renderRepo}\n              items={zip(starredRepos, starredRepoOwners)}\n              onLoadMoreClick={this.handleLoadMoreClick}\n              loadingLabel={`Loading ${login}'s starred...`}\n              {...starredPagination} />\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  // We need to lower case the login due to the way GitHub's API behaves.\n  // Have a look at ../middleware/api.js for more details.\n  const login = ownProps.match.params.login.toLowerCase()\n\n  const {\n    pagination: { starredByUser },\n    entities: { users, repos }\n  } = state\n\n  const starredPagination = starredByUser[login] || { ids: [] }\n  const starredRepos = starredPagination.ids.map(id => repos[id])\n  const starredRepoOwners = starredRepos.map(repo => users[repo.owner])\n\n  return {\n    login,\n    starredRepos,\n    starredRepoOwners,\n    starredPagination,\n    user: users[login]\n  }\n}\n\nexport default withRouter(connect(mapStateToProps, {\n  loadUser,\n  loadStarred\n})(UserPage))\n","/* eslint-disable no-undef */\n\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router-dom'\nimport { loadRepo, loadStargazers } from '../actions'\nimport Repo from '../components/Repo'\nimport User from '../components/User'\nimport List from '../components/List'\n\nconst loadData = props => {\n  const { fullName } = props\n  props.loadRepo(fullName, [ 'description' ])\n  props.loadStargazers(fullName)\n}\n\nclass RepoPage extends Component {\n  static propTypes = {\n    repo: PropTypes.object,\n    fullName: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    owner: PropTypes.object,\n    stargazers: PropTypes.array.isRequired,\n    stargazersPagination: PropTypes.object,\n    loadRepo: PropTypes.func.isRequired,\n    loadStargazers: PropTypes.func.isRequired\n  }\n\n  componentDidMount() {\n    loadData(this.props)\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.fullName !== this.props.fullName) {\n      loadData(this.props)\n    }\n  }\n\n  handleLoadMoreClick = () => {\n    this.props.loadStargazers(this.props.fullName, true)\n  }\n\n  renderUser(user) {\n    return <User user={user} key={user.login} />\n  }\n\n  render() {\n    const { repo, owner, name } = this.props\n    if (!repo || !owner) {\n      return <h1><i>Loading {name} details...</i></h1>\n    }\n\n    const { stargazers, stargazersPagination } = this.props\n    return (\n      <div>\n        <Repo repo={repo}\n              owner={owner} />\n        <hr />\n        <List renderItem={this.renderUser}\n              items={stargazers}\n              onLoadMoreClick={this.handleLoadMoreClick}\n              loadingLabel={`Loading stargazers of ${name}...`}\n              {...stargazersPagination} />\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  // We need to lower case the login/name due to the way GitHub's API behaves.\n  // Have a look at ../middleware/api.js for more details.\n  const login = ownProps.match.params.login.toLowerCase()\n  const name = ownProps.match.params.name.toLowerCase()\n\n  const {\n    pagination: { stargazersByRepo },\n    entities: { users, repos }\n  } = state\n\n  const fullName = `${login}/${name}`\n  const stargazersPagination = stargazersByRepo[fullName] || { ids: [] }\n  const stargazers = stargazersPagination.ids.map(id => users[id])\n\n  return {\n    fullName,\n    name,\n    stargazers,\n    stargazersPagination,\n    repo: repos[fullName],\n    owner: users[login]\n  }\n}\n\nexport default withRouter(connect(mapStateToProps, {\n  loadRepo,\n  loadStargazers\n})(RepoPage))\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Provider } from 'react-redux'\nimport { Route } from 'react-router-dom'\nimport App from './App'\nimport UserPage from './UserPage'\nimport RepoPage from './RepoPage'\n\nconst Root = ({ store }) => (\n  <Provider store={store}>\n    <div>\n      <Route path=\"/\" component={App} />\n      <Route path=\"/:login/:name\"\n             component={RepoPage} />\n      <Route path=\"/:login\"\n             component={UserPage} />\n    </div>\n  </Provider>\n)\n\nRoot.propTypes = {\n  store: PropTypes.object.isRequired,\n}\nexport default Root\n","import union from 'lodash/union'\n\n// Creates a reducer managing pagination, given the action types to handle,\n// and a function telling how to extract the key from an action.\nconst paginate = ({ types, mapActionToKey }) => {\n  if (!Array.isArray(types) || types.length !== 3) {\n    throw new Error('Expected types to be an array of three elements.')\n  }\n  if (!types.every(t => typeof t === 'string')) {\n    throw new Error('Expected types to be strings.')\n  }\n  if (typeof mapActionToKey !== 'function') {\n    throw new Error('Expected mapActionToKey to be a function.')\n  }\n\n  const [ requestType, successType, failureType ] = types\n\n  const updatePagination = (state = {\n    isFetching: false,\n    nextPageUrl: undefined,\n    pageCount: 0,\n    ids: []\n  }, action) => {\n    switch (action.type) {\n      case requestType:\n        return {\n          ...state,\n          isFetching: true\n        }\n      case successType:\n        return {\n          ...state,\n          isFetching: false,\n          ids: union(state.ids, action.response.result),\n          nextPageUrl: action.response.nextPageUrl,\n          pageCount: state.pageCount + 1\n        }\n      case failureType:\n        return {\n          ...state,\n          isFetching: false\n        }\n      default:\n        return state\n    }\n  }\n\n  return (state = {}, action) => {\n    // Update pagination by key\n    switch (action.type) {\n      case requestType:\n      case successType:\n      case failureType:\n        const key = mapActionToKey(action)\n        if (typeof key !== 'string') {\n          throw new Error('Expected key to be a string.')\n        }\n        return {\n          ...state,\n          [key]: updatePagination(state[key], action)\n        }\n      default:\n        return state\n    }\n  }\n}\n\nexport default paginate\n","import * as ActionTypes from '../actions'\nimport merge from 'lodash/merge'\nimport paginate from './paginate'\nimport { combineReducers } from 'redux'\n\n// Updates an entity cache in response to any action with response.entities.\nconst entities = (state = { users: {}, repos: {} }, action) => {\n  if (action.response && action.response.entities) {\n    return merge({}, state, action.response.entities)\n  }\n\n  return state\n}\n\n// Updates error message to notify about the failed fetches.\nconst errorMessage = (state = null, action) => {\n  const { type, error } = action\n\n  if (type === ActionTypes.RESET_ERROR_MESSAGE) {\n    return null\n  } else if (error) {\n    return error\n  }\n\n  return state\n}\n\n// Updates the pagination data for different actions.\nconst pagination = combineReducers({\n  starredByUser: paginate({\n    mapActionToKey: action => action.login,\n    types: [\n      ActionTypes.STARRED_REQUEST,\n      ActionTypes.STARRED_SUCCESS,\n      ActionTypes.STARRED_FAILURE\n    ]\n  }),\n  stargazersByRepo: paginate({\n    mapActionToKey: action => action.fullName,\n    types: [\n      ActionTypes.STARGAZERS_REQUEST,\n      ActionTypes.STARGAZERS_SUCCESS,\n      ActionTypes.STARGAZERS_FAILURE\n    ]\n  })\n})\n\nconst rootReducer = combineReducers({\n  entities,\n  pagination,\n  errorMessage,\n})\n\nexport default rootReducer\n","import { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport api from '../middleware/api'\nimport rootReducer from '../reducers'\n\nconst configureStore = preloadedState => createStore(\n  rootReducer,\n  preloadedState,\n  applyMiddleware(thunk, api)\n)\n\nexport default configureStore\n","import { CALL_API, Schemas } from '../middleware/api'\n\nexport const USER_REQUEST = 'USER_REQUEST'\nexport const USER_SUCCESS = 'USER_SUCCESS'\nexport const USER_FAILURE = 'USER_FAILURE'\n\n// Fetches a single user from Github API.\n// Relies on the custom API middleware defined in ../middleware/api.js.\nconst fetchUser = login => ({\n  [CALL_API]: {\n    types: [ USER_REQUEST, USER_SUCCESS, USER_FAILURE ],\n    endpoint: `users/${login}`,\n    schema: Schemas.USER\n  }\n})\n\n// Fetches a single user from Github API unless it is cached.\n// Relies on Redux Thunk middleware.\nexport const loadUser = (login, requiredFields = []) => (dispatch, getState) => {\n  const user = getState().entities.users[login]\n  if (user && requiredFields.every(key => user.hasOwnProperty(key))) {\n    return null\n  }\n\n  return dispatch(fetchUser(login))\n}\n\nexport const REPO_REQUEST = 'REPO_REQUEST'\nexport const REPO_SUCCESS = 'REPO_SUCCESS'\nexport const REPO_FAILURE = 'REPO_FAILURE'\n\n// Fetches a single repository from Github API.\n// Relies on the custom API middleware defined in ../middleware/api.js.\nconst fetchRepo = fullName => ({\n  [CALL_API]: {\n    types: [ REPO_REQUEST, REPO_SUCCESS, REPO_FAILURE ],\n    endpoint: `repos/${fullName}`,\n    schema: Schemas.REPO\n  }\n})\n\n// Fetches a single repository from Github API unless it is cached.\n// Relies on Redux Thunk middleware.\nexport const loadRepo = (fullName, requiredFields = []) => (dispatch, getState) => {\n  const repo = getState().entities.repos[fullName]\n  if (repo && requiredFields.every(key => repo.hasOwnProperty(key))) {\n    return null\n  }\n\n  return dispatch(fetchRepo(fullName))\n}\n\nexport const STARRED_REQUEST = 'STARRED_REQUEST'\nexport const STARRED_SUCCESS = 'STARRED_SUCCESS'\nexport const STARRED_FAILURE = 'STARRED_FAILURE'\n\n// Fetches a page of starred repos by a particular user.\n// Relies on the custom API middleware defined in ../middleware/api.js.\nconst fetchStarred = (login, nextPageUrl) => ({\n  login,\n  [CALL_API]: {\n    types: [ STARRED_REQUEST, STARRED_SUCCESS, STARRED_FAILURE ],\n    endpoint: nextPageUrl,\n    schema: Schemas.REPO_ARRAY\n  }\n})\n\n// Fetches a page of starred repos by a particular user.\n// Bails out if page is cached and user didn't specifically request next page.\n// Relies on Redux Thunk middleware.\nexport const loadStarred = (login, nextPage) => (dispatch, getState) => {\n  const {\n    nextPageUrl = `users/${login}/starred`,\n    pageCount = 0\n  } = getState().pagination.starredByUser[login] || {}\n\n  if (pageCount > 0 && !nextPage) {\n    return null\n  }\n\n  return dispatch(fetchStarred(login, nextPageUrl))\n}\n\nexport const STARGAZERS_REQUEST = 'STARGAZERS_REQUEST'\nexport const STARGAZERS_SUCCESS = 'STARGAZERS_SUCCESS'\nexport const STARGAZERS_FAILURE = 'STARGAZERS_FAILURE'\n\n// Fetches a page of stargazers for a particular repo.\n// Relies on the custom API middleware defined in ../middleware/api.js.\nconst fetchStargazers = (fullName, nextPageUrl) => ({\n  fullName,\n  [CALL_API]: {\n    types: [ STARGAZERS_REQUEST, STARGAZERS_SUCCESS, STARGAZERS_FAILURE ],\n    endpoint: nextPageUrl,\n    schema: Schemas.USER_ARRAY\n  }\n})\n\n// Fetches a page of stargazers for a particular repo.\n// Bails out if page is cached and user didn't specifically request next page.\n// Relies on Redux Thunk middleware.\nexport const loadStargazers = (fullName, nextPage) => (dispatch, getState) => {\n  const {\n    nextPageUrl = `repos/${fullName}/stargazers`,\n    pageCount = 0\n  } = getState().pagination.stargazersByRepo[fullName] || {}\n\n  if (pageCount > 0 && !nextPage) {\n    return null\n  }\n\n  return dispatch(fetchStargazers(fullName, nextPageUrl))\n}\n\nexport const RESET_ERROR_MESSAGE = 'RESET_ERROR_MESSAGE'\n\n// Resets the currently visible error message.\nexport const resetErrorMessage = () => ({\n    type: RESET_ERROR_MESSAGE\n})\n","if (process.env.NODE_ENV === 'production') {\n  module.exports = require('./Root.prod')\n} else {\n  module.exports = require('./Root.dev')\n}\n","if (process.env.NODE_ENV === 'production') {\n  module.exports = require('./configureStore.prod')\n} else {\n  module.exports = require('./configureStore.dev')\n}\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport Root from './containers/Root'\nimport configureStore from './store/configureStore'\n\nconst store = configureStore()\n\nrender(\n  <Router>\n    <Root store={store} />\n  </Router>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}